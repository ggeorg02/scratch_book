[
  {
    "objectID": "docs/misc/quarto-start.html",
    "href": "docs/misc/quarto-start.html",
    "title": "Setting up website using Quarto",
    "section": "",
    "text": "I will be using VSCode to work with Quarto and to develop the website.\nFirst, I want to add the Quarto extension in VSCode.\n\nNext, I will create a project.\n\nAfter clicking on Quarto: Create Project, select “Website Project.”\n\nThis provides a skeleton for the website.\n\nAfter this, you can render the website to see if it is working. I used the command line for this. I navigated to the folder where my project is located and ran quarto preview.\n\nI can also render it to create the HTML for the website.\n\nWoohoo! It looks quite neat.\n\nNow it is time to publish.\nTrigger…. quarto publish.\n\n\n\n\n\n\nDanger\n\n\n\nIf you get into any issue like below:\nerror: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400\nsend-pack: unexpected disconnect while reading sideband packet\nfatal: the remote end hung up unexpectedly\nThen it is possible that a large push to the gh-pages branch could exceed the default buffer size. If this is the case, increase the buffer size and try again.\ngit config --global http.postBuffer 157286400\n\n\nNow, I will work on the website structure. I’m not completely clear on the structure I want, but I’m thinking of creating a couple of sections and .qmd files within each section.\nThe website structure is something you want work in _quarto.yml.\n\n\n\n\n\n\nNote\n\n\n\nHere are few resources that I found helpful:\n\nUnderstanding book structure in Quarto\nVarious navigations in Quarto\nHow to publish a Quarto website to GitHub Pages\nCall out block in Quarto - this is similar to the admonition block in Jupyter book."
  },
  {
    "objectID": "docs/misc/about.html",
    "href": "docs/misc/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "docs/misc/r_stringr.html",
    "href": "docs/misc/r_stringr.html",
    "title": "Working with strings in R",
    "section": "",
    "text": "Introduction\nWhy we want to learn how to work with strings in R?\n\nThere are many situations where you want to extract some information from the strings. Eg..\n\nSay you have a column with reviews on movies. You want to pull in all the movie names that mentioned “Great screenplay”, “Great acting” etc. within the review column.\nSay you have a column with email addresses. You want to pull in all the email addresses that have the domain “gmail.com”.\nSay you have a column with phone numbers. You want to pull in all the phone numbers that have the country code “91”.\n\nThere could be situations where you want to clean the strings. Eg..\n\nSay you have a column with names. You want to separate the first name and last name.\nsay you have multiple columns with house number, street, city, state and country. You want to combine all of them to get the full address.\nSay there was an error in the data entry in a column and you want to correct the mistake. You want to change the company name from “Applle” to “Apple”.\n\n\nThere could be many more situations where you want to work with strings. Here you will get experience with some of the situations that we mentioned above.\nBelow I will demonstrate both on the lakers data frame below (which is the Los Angeles Lakers 2008-2009 basketball data set from the lubridate package):\nWhy do we want to learn how to work with strings in R?\n\nThere are many situations where you might want to extract information from strings. For eg:\n\nSuppose you have a column with movie reviews and you want to extract all movie names that mention “Great screenplay,” “Great acting,” etc., within the review column.\nSuppose you have a column with email addresses and you want to extract all email addresses that have the domain “gmail.com.”\nSuppose you have a column with phone numbers and you want to extract all phone numbers that have the country code “91.”\n\nThere are also situations where you might want to clean strings. For eg:\n\nSuppose you have a column with names and you want to separate the first name and last name.\nSuppose you have multiple columns with house number, street, city, state, and country, and you want to combine them into a full address.\nSuppose there was an error in the data entry in a column, and you want to correct the mistake, such as changing the company name from “Applle” to “Apple.”\n\n\nThere could be many more situations where you need to work with strings. In this article, you will gain experience with some of the situations mentioned above.\nBelow, I will demonstrate these techniques using the lakers data frame (which is the Los Angeles Lakers 2008-2009 basketball data set from the lubridate package):\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(stringr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr   1.1.4     ✔ readr   2.1.5\n✔ forcats 1.0.0     ✔ tibble  3.2.1\n✔ ggplot2 3.5.1     ✔ tidyr   1.3.1\n✔ purrr   1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\nHere is the data frame:\n\nhead(lakers)\n\n      date opponent game_type  time period     etype team              player\n1 20081028      POR      home 12:00      1 jump ball  OFF                    \n2 20081028      POR      home 11:39      1      shot  LAL           Pau Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL        Derek Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL           Pau Gasol\n6 20081028      POR      home 11:22      1      shot  LAL           Pau Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\n\nLet’s now get on with some questions:\n\nDiscussion: I want to know the first name and last name of the players in the lakers data frame. How can I do that?\n\n\nhead(lakers)\n\n      date opponent game_type  time period     etype team              player\n1 20081028      POR      home 12:00      1 jump ball  OFF                    \n2 20081028      POR      home 11:39      1      shot  LAL           Pau Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL        Derek Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL           Pau Gasol\n6 20081028      POR      home 11:22      1      shot  LAL           Pau Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\nlakers |> separate(player, into =c(\"first_name\", \"last_name\"), sep = \" \") |> head()\n\nWarning: Expected 2 pieces. Additional pieces discarded in 59 rows [2417, 2419, 5601,\n5615, 5617, 5655, 5666, 5668, 5681, 5684, 5704, 5714, 5718, 5777, 5788, 7745,\n7748, 7770, 7785, 7816, ...].\n\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 5398 rows [1, 35, 40, 44,\n50, 51, 52, 69, 70, 81, 82, 83, 84, 96, 97, 105, 110, 114, 123, 127, ...].\n\n\n      date opponent game_type  time period     etype team first_name  last_name\n1 20081028      POR      home 12:00      1 jump ball  OFF                  <NA>\n2 20081028      POR      home 11:39      1      shot  LAL        Pau      Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL   Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL      Derek     Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL        Pau      Gasol\n6 20081028      POR      home 11:22      1      shot  LAL        Pau      Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\n\nWhen you run this code you will see that the player column has been split into two columns first_name and last_name. But you will also get following warning:\n\n\n\n\n\n\nWarning\n\n\n\nWarning messages: 1: Expected 2 pieces. Additional pieces discarded in 59 rows [2417, 2419, 5601, 5615, 5617, 5655, 5666, 5668, 5681, 5684, 5704, 5714, 5718, 5777, 5788, 7745, 7748, 7770, 7785, 7816, …]. 2: Expected 2 pieces. Missing pieces filled with NA in 5398 rows [1, 35, 40, 44, 50, 51, 52, 69, 70, 81, 82, 83, 84, 96, 97, 105, 110, 114, 123, 127, …].\n\n\n\nDiscussion: What do you think is happening in the above code?\n\n\n\n\n\n\n\nNote\n\n\n\nThe warning 1 message is saying that there are some rows where the player column doesn’t have two pieces. This is because there could be some players who have middle names.\nTo handle this situation, you can use the extra argument in the separate() function. This will only splits at most length(into) times.\n\nnew_lakers <- lakers |> separate(player, into =c(\"first_name\", \"last_name\"), sep = \" \", extra = \"merge\")\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 5398 rows [1, 35, 40, 44,\n50, 51, 52, 69, 70, 81, 82, 83, 84, 96, 97, 105, 110, 114, 123, 127, ...].\n\nnew_lakers |> head()\n\n      date opponent game_type  time period     etype team first_name  last_name\n1 20081028      POR      home 12:00      1 jump ball  OFF                  <NA>\n2 20081028      POR      home 11:39      1      shot  LAL        Pau      Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL   Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL      Derek     Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL        Pau      Gasol\n6 20081028      POR      home 11:22      1      shot  LAL        Pau      Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe warning 2 message is saying that there are some rows where the player column doesn’t have two pieces. This is because there are some players who only have one name.\nIt is fair to have a missing value in the last_name column for these players as NA. So we can ignore this warning.\nLet’s explore a player to see what is happening.\n\nnew_lakers |> filter(is.na(last_name)) |> head()\n\n      date opponent game_type  time period     etype team first_name last_name\n1 20081028      POR      home 12:00      1 jump ball  OFF                 <NA>\n2 20081028      POR      home 07:49      1   timeout  POR                 <NA>\n3 20081028      POR      home 07:24      1       sub  POR                 <NA>\n4 20081028      POR      home 06:39      1   rebound  POR                 <NA>\n5 20081028      POR      home 05:52      1   rebound  POR                 <NA>\n6 20081028      POR      home 05:50      1       sub  LAL                 <NA>\n  result points    type  x  y\n1             0         NA NA\n2             0 regular NA NA\n3             0         NA NA\n4             0         NA NA\n5             0         NA NA\n6             0         NA NA\n\n\nSeems like these are situations where the player name is not recorded. If we really want to work out something with the name column then these rows might not makes much sense and fair to remove them.\n\n\n\nExercise: Can you try now to bring back the player column by combining the first_name and last_name columns?\n\n\nnew_lakers |> unite('player',first_name, last_name, sep = \" \") |> head()\n\n      date opponent game_type  time period     etype team              player\n1 20081028      POR      home 12:00      1 jump ball  OFF                  NA\n2 20081028      POR      home 11:39      1      shot  LAL           Pau Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL        Derek Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL           Pau Gasol\n6 20081028      POR      home 11:22      1      shot  LAL           Pau Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\n\n\nDiscussion: Can you pull all the rows where the player name that starts with Lo?\n\n\nlakers |> filter(str_detect(player, \"^Lo\")) |> head()\n\n      date opponent game_type  time period    etype team         player result\n1 20081120      PHX      away 03:51      4  rebound  PHX Louis Amundson       \n2 20081120      PHX      away 02:42      4  rebound  PHX Louis Amundson       \n3 20081120      PHX      away 00:52      4     shot  PHX Louis Amundson   made\n4 20081203      PHI      away 03:19      1 turnover  PHI   Lou Williams       \n5 20081203      PHI      away 02:26      1     shot  PHI   Lou Williams missed\n6 20081203      PHI      away 00:47      1 turnover  PHI   Lou Williams       \n  points            type  x  y\n1      0             def NA NA\n2      0             def NA NA\n3      2 turnaround jump 23 14\n4      0                 NA NA\n5      0            jump 39 16\n6      0                 NA NA\n\nlakers |> filter(str_detect(player, \"Lo.*\")) |> head()\n\n      date opponent game_type  time period   etype team         player result\n1 20081120      PHX      away 03:51      4 rebound  PHX Louis Amundson       \n2 20081120      PHX      away 02:42      4 rebound  PHX Louis Amundson       \n3 20081120      PHX      away 02:36      4    shot  PHX    Robin Lopez   made\n4 20081120      PHX      away 00:52      4    shot  PHX Louis Amundson   made\n5 20081120      PHX      away 00:19      4    shot  PHX    Robin Lopez missed\n6 20081125      NJN      home 10:30      1    shot  NJN    Brook Lopez   made\n  points            type  x  y\n1      0             def NA NA\n2      0             def NA NA\n3      2   reverse layup 25  6\n4      2 turnaround jump 23 14\n5      0            jump 18  9\n6      2            jump 15 20\n\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you use the correct regex pattern when using the str_detect() function. You need to understand the difference between ^Lo and Lo.*. The former will pull in all the players whose name starts with Lo and the latter will pull in all the players whose name contains Lo.\nYou can’t use starts_with() function in the filter() function in this case. starts_with() function is used within selecting function. Below won’t work.\n\n# lakers |> filter(str_detect(player, starts_with(\"Lo\"))) |> head()\n\n\n\n\nExercise: Can you get all the players whose last name started with Lo ?\n\n\nlakers |> filter(str_detect(player, \"^\\\\w+\\\\s+Lo\")) |> head()\n\n      date opponent game_type  time period   etype team      player result\n1 20081120      PHX      away 02:36      4    shot  PHX Robin Lopez   made\n2 20081120      PHX      away 00:19      4    shot  PHX Robin Lopez missed\n3 20081125      NJN      home 10:30      1    shot  NJN Brook Lopez   made\n4 20081125      NJN      home 08:28      1    shot  NJN Brook Lopez   made\n5 20081125      NJN      home 07:45      1    shot  NJN Brook Lopez   made\n6 20081125      NJN      home 07:29      1 rebound  NJN Brook Lopez       \n  points           type  x  y\n1      2  reverse layup 25  6\n2      0           jump 18  9\n3      2           jump 15 20\n4      2 alley oop dunk 25  6\n5      2          layup 25  6\n6      0            def NA NA\n\n\n\n^\\\\w+ matches the first name (any sequence of alphanumeric characters at the start).\n\\\\s+ matches one or more spaces between the first and second names.\nLo checks if the second name (last name) starts with “Lo.”\n\n\nExercise: Can you get all the players who got more than first and last name ?\n\n\nlakers |> filter(str_count(player, \" \") >= 2) |> pull(player) |> unique() |> head()\n\n[1] \"Jose Juan Barea\"          \"Luc Richard Mbah a Moute\"\n\n#  following is also picking J.R. Smith which is not correct. check again the regex pattern.\nlakers |> filter(str_count(player,\"\\\\w+\") > 2)  |> head()\n\n      date opponent game_type  time period   etype team     player result\n1 20081101      DEN      away 03:10      1    foul  DEN J.R. Smith       \n2 20081101      DEN      away 10:25      2    shot  DEN J.R. Smith missed\n3 20081101      DEN      away 09:36      2    shot  DEN J.R. Smith   made\n4 20081101      DEN      away 08:18      2    shot  DEN J.R. Smith missed\n5 20081101      DEN      away 06:41      2 rebound  DEN J.R. Smith       \n6 20081101      DEN      away 06:05      2    shot  DEN J.R. Smith missed\n  points         type  x  y\n1      0     shooting NA NA\n2      0 running jump 25 13\n3      2    slam dunk 25  6\n4      0          3pt 46 23\n5      0          def NA NA\n6      0          3pt 44 26\n\n\n\nExercise: Can you get all the players whose middle name is Richard ?\n\n\nlakers |> filter(str_detect(player, \"^\\\\w+\\\\s+Richard\\\\b\")) |> head()\n\n      date opponent game_type  time period    etype team\n1 20081207      MIL      home 06:08      1     shot  MIL\n2 20081207      MIL      home 05:56      1 turnover  MIL\n3 20081207      MIL      home 02:56      1     shot  MIL\n4 20081207      MIL      home 01:31      1  rebound  MIL\n5 20081207      MIL      home 10:07      2     shot  MIL\n6 20081207      MIL      home 04:17      2 turnover  MIL\n                    player result points          type  x  y\n1 Luc Richard Mbah a Moute missed      0 reverse layup 25  6\n2 Luc Richard Mbah a Moute             0               NA NA\n3 Luc Richard Mbah a Moute missed      0          jump  5  5\n4 Luc Richard Mbah a Moute             0           off NA NA\n5 Luc Richard Mbah a Moute missed      0          jump 44  7\n6 Luc Richard Mbah a Moute             0               NA NA\n\n\n\nExercise: Can you pull all the rows where the player name that ends with wry?\n\n\nlakers |> filter(str_detect(player, \"wry$\")) |> head()\n\n      date opponent game_type  time period      etype team     player result\n1 20081222      MEM      away 09:33      1       shot  MEM Kyle Lowry missed\n2 20081222      MEM      away 04:59      1    rebound  MEM Kyle Lowry       \n3 20081222      MEM      away 04:39      1       shot  MEM Kyle Lowry missed\n4 20081222      MEM      away 03:01      1       shot  MEM Kyle Lowry   made\n5 20081222      MEM      away 03:01      1 free throw  MEM Kyle Lowry   made\n6 20081222      MEM      away 09:57      3       foul  MEM Kyle Lowry       \n  points          type  x  y\n1      0           3pt 13 28\n2      0           def NA NA\n3      0     jump bank 30 12\n4      2 driving layup 25  6\n5      1               NA NA\n6      0      shooting NA NA\n\n\n\nExercise: Can you get all the players whose first name is Lou ?\n\nThe following code doesn’t work as expected. Can you think why?\n\nlakers |> filter(str_detect(player, \"^Lou\")) |> nrow()\n\n[1] 66\n\n\nCorrect approach:\n\nlakers |> filter(str_detect(player, \"^Lou\\\\b\")) |> nrow()\n\n[1] 33\n\n\n\nExercise: Can you get all the players whose first name is Lou and last name is Williams ?\n\n\nlakers |> filter(str_detect(player, \"Lou Williams\"))\n\n       date opponent game_type  time period      etype team       player result\n1  20081203      PHI      away 03:19      1   turnover  PHI Lou Williams       \n2  20081203      PHI      away 02:26      1       shot  PHI Lou Williams missed\n3  20081203      PHI      away 00:47      1   turnover  PHI Lou Williams       \n4  20081203      PHI      away 00:03      1       shot  PHI Lou Williams missed\n5  20081203      PHI      away 11:20      4       shot  PHI Lou Williams   made\n6  20081203      PHI      away 10:45      4       shot  PHI Lou Williams   made\n7  20081203      PHI      away 10:20      4 free throw  PHI Lou Williams   made\n8  20081203      PHI      away 10:20      4 free throw  PHI Lou Williams   made\n9  20081203      PHI      away 05:54      4       shot  PHI Lou Williams   made\n10 20081203      PHI      away 04:54      4       shot  PHI Lou Williams   made\n11 20081203      PHI      away 00:54      4       shot  PHI Lou Williams   made\n12 20081203      PHI      away 00:19      4       shot  PHI Lou Williams missed\n13 20090317      PHI      home 00:01      1       shot  PHI Lou Williams   made\n14 20090317      PHI      home 11:09      2       shot  PHI Lou Williams   made\n15 20090317      PHI      home 11:09      2 free throw  PHI Lou Williams   made\n16 20090317      PHI      home 10:38      2   turnover  PHI Lou Williams       \n17 20090317      PHI      home 09:26      2       shot  PHI Lou Williams   made\n18 20090317      PHI      home 09:26      2 free throw  PHI Lou Williams   made\n19 20090317      PHI      home 08:56      2       shot  PHI Lou Williams   made\n20 20090317      PHI      home 08:56      2 free throw  PHI Lou Williams   made\n21 20090317      PHI      home 05:39      2       foul  PHI Lou Williams       \n22 20090317      PHI      home 03:35      2       shot  PHI Lou Williams   made\n23 20090317      PHI      home 01:44      2       shot  PHI Lou Williams missed\n24 20090317      PHI      home 00:44      2       shot  PHI Lou Williams missed\n25 20090317      PHI      home 00:33      2       shot  PHI Lou Williams missed\n26 20090317      PHI      home 00:26      2       shot  PHI Lou Williams missed\n27 20090317      PHI      home 00:50      3       shot  PHI Lou Williams missed\n28 20090317      PHI      home 10:59      4       shot  PHI Lou Williams   made\n29 20090317      PHI      home 06:00      4       shot  PHI Lou Williams missed\n30 20090317      PHI      home 04:03      4       shot  PHI Lou Williams   made\n31 20090317      PHI      home 01:26      4       shot  PHI Lou Williams missed\n32 20090317      PHI      home 01:02      4    rebound  PHI Lou Williams       \n33 20090317      PHI      home 00:29      4       shot  PHI Lou Williams missed\n   points           type  x  y\n1       0                NA NA\n2       0           jump 39 16\n3       0                NA NA\n4       0            3pt  2 10\n5       2           jump 35 20\n6       3            3pt 49  5\n7       1                NA NA\n8       1                NA NA\n9       3            3pt 23 33\n10      3            3pt 25 33\n11      2           jump 14 18\n12      0            3pt 49  4\n13      2 step back jump 27 29\n14      2  driving layup 25  6\n15      1                NA NA\n16      0                NA NA\n17      2  driving layup 25  6\n18      1                NA NA\n19      2   running jump 32  6\n20      1                NA NA\n21      0       shooting NA NA\n22      3            3pt  2 12\n23      0            3pt 38 28\n24      0            3pt 47 16\n25      0            3pt 48  7\n26      0          layup 25  6\n27      0          layup 25  6\n28      2          layup 25  6\n29      0           jump 29 29\n30      2          layup 25  6\n31      0          layup 25  6\n32      0            def NA NA\n33      0          layup 25  6\n\n\n\nExercise: Can you get all the rows with no player names?\n\n\nlakers |> filter(str_detect(player, \"^$\")) |> head()\n\n      date opponent game_type  time period     etype team player result points\n1 20081028      POR      home 12:00      1 jump ball  OFF                    0\n2 20081028      POR      home 07:49      1   timeout  POR                    0\n3 20081028      POR      home 07:24      1       sub  POR                    0\n4 20081028      POR      home 06:39      1   rebound  POR                    0\n5 20081028      POR      home 05:52      1   rebound  POR                    0\n6 20081028      POR      home 05:50      1       sub  LAL                    0\n     type  x  y\n1         NA NA\n2 regular NA NA\n3         NA NA\n4         NA NA\n5         NA NA\n6         NA NA\n\n\n\nExercise: Get all the players who got “ant” within their names?\n\n\nlakers |> filter(str_detect(tolower(player), \"ant\")) |> pull(player) |> unique()\n\n [1] \"Kobe Bryant\"      \"Carmelo Anthony\"  \"Anthony Carter\"   \"Antoine Wright\"  \n [5] \"Grant Hill\"       \"Anthony Parker\"   \"Antawn Jamison\"   \"Antonio Daniels\" \n [9] \"Rashad McCants\"   \"Joel Anthony\"     \"Anthony Johnson\"  \"Anthony Randolph\"\n[13] \"Kevin Durant\"     \"Anthony Morrow\"   \"Antonio McDyess\" \n\n\n\nExercise: If there is no entry in the player column, replace it with “no name” ?\n\n\nlakers |> mutate(player = str_replace(player, \"^$\", \"no name\")) |> head()\n\n      date opponent game_type  time period     etype team              player\n1 20081028      POR      home 12:00      1 jump ball  OFF             no name\n2 20081028      POR      home 11:39      1      shot  LAL           Pau Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL        Derek Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL           Pau Gasol\n6 20081028      POR      home 11:22      1      shot  LAL           Pau Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\n\n\n*** Exercise:*** Can you make the data more readable by replacing all “3pt” to “3 point” within the type column?\n\n\nlakers |> mutate(type = str_replace(type, \"3pt\", \"3 point\")) |> \n      filter( type == \"3 point\") |> head(10)\n\n       date opponent game_type  time period etype team              player\n1  20081028      POR      home 05:13      1  shot  POR         Steve Blake\n2  20081028      POR      home 04:06      1  shot  LAL Vladimir Radmanovic\n3  20081028      POR      home 03:48      1  shot  POR      Rudy Fernandez\n4  20081028      POR      home 03:34      1  shot  LAL          Lamar Odom\n5  20081028      POR      home 03:24      1  shot  POR         Steve Blake\n6  20081028      POR      home 01:31      1  shot  LAL        Trevor Ariza\n7  20081028      POR      home 00:35      1  shot  POR       Channing Frye\n8  20081028      POR      home 00:00      1  shot  LAL       Sasha Vujacic\n9  20081028      POR      home 11:23      2  shot  POR    Sergio Rodriguez\n10 20081028      POR      home 10:51      2  shot  POR       Channing Frye\n   result points    type  x  y\n1  missed      0 3 point 47  6\n2  missed      0 3 point  1  6\n3  missed      0 3 point 38 28\n4  missed      0 3 point 41 26\n5  missed      0 3 point 44 24\n6    made      3 3 point 46 17\n7  missed      0 3 point 26 32\n8  missed      0 3 point 37 30\n9  missed      0 3 point 43 25\n10 missed      0 3 point 17 32"
  },
  {
    "objectID": "docs/misc/useqmd_vscode.html",
    "href": "docs/misc/useqmd_vscode.html",
    "title": "Use Quarto in VS Code",
    "section": "",
    "text": "Quarto in VS Code\nQuarto is a markdown-based document format that supports a wide range of document types. You can easily render a Quarto document to various formats such as HTML, PDF, and Word. Additionally, it is easy to mix R and Python code within a Quarto document.\nYou can directly get started with qmd in Positron, also there is no additional setup needed for using R- qmd with positron. I tried it and found it very straighforward, but I thought about using VSCode since I am more comfortable with it, and also Positron is still in beta.\nHere are the steps to use Quarto in VS Code:\nWell this is straight forward, you can use the Quarto extension in VS Code.\n\nClick on the extensions icon in the sidebar and search for Quarto.\nInstall the Quarto extension.\n\n\nUse can use python code in qmd by specifying the language in the code block.\n\nimport os\nos.environ['R_HOME'] = '/Users/ggeorg02/opt/miniconda3/envs/rvscodeR/bin/R'\nprint(\"Hello World\")\n\nHello World\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you downloaded this page as qmd you will see that the above code block can be run by clicking the play button Run Cell in the top left corner of the code block.\n\n\n\n\nUsing R in qmd in VS Code\nYou can use R code in qmd by specifying the language in the code block. But inorder to run the code cell and see the output, you need to set this up. Here are the steps that I did to setup R in qmd in VS Code:\n\nI did set it up using conda environment. As I don’t want to mess up with my global R and base python installation. Here is the command I used conda create -n rvscodeR r-essentials r-base\nHere are the packages that I installed in the conda environment:\n\nconda install radian\nnbformat\n\nHere is my r path /Users/ggeorg02/opt/miniconda3/envs/rvscodeR/bin/R and the radian path /Users/ggeorg02/opt/miniconda3/envs/rvscodeR/bin/radian\nUpdate the settings.json file in VS Code with the following settings:\n\n        \"r.bracketedPaste\": true,\n        \"r.rpath.mac\": \"/Users/ggeorg02/opt/miniconda3/envs/rvscodeR/bin/R\",\n        \"r.rterm.mac\": \"/Users/ggeorg02/opt/miniconda3/envs/rvscodeR/bin/radian\",\n        \"r.rterm.option\": [\n            \"--no-save\",\n            \"--no-restore\",\n            \"--r-binary=/Users/ggeorg02/opt/miniconda3/envs/rvscodeR/bin/R\"]\n\nNote: You can do this by the shortcut CMD + Shift + P and then type Preferences: Open Settings (JSON)\n\n\nNow you can run the R code in qmd by specifying the R code block.\n\n\n1+1\n\n[1] 2\n\n\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\n\n\n\n\n\n\nNote\n\n\n\nMake sure you install all necessary packages that are needed in the R that you are running in the conda environment (as that is what we specified in settings.json).\n\n\n\nYou can render the document that you are working on by clicking the Preview button in the top right corner of the document (Shortcut: CMD + Shift + K).\n\nI also installed additional R packages to enable rendering during the preview. If your document doesn’t get rendered, it will show you the error in VSCode and the terminal. Most likely, it will be due to either missing R packages or not installing the necessary packages in the r.rpath.mac that you specified in the settings.json file.\ninstall.packages(\"reticulate\")\n\n\n\n\n\n\nNote\n\n\n\nHere are few resources that I found helpful:\nhttps://jimgar.github.io/posts/vs-code-macos-r/post.html\nhttps://github.com/randy3k/radian"
  },
  {
    "objectID": "docs/misc/r_factors.html",
    "href": "docs/misc/r_factors.html",
    "title": "Working with factors in R",
    "section": "",
    "text": "Introduction\nWhy do we want to learn how to work with factors in R?\n\nMainly because you often need to work with categorical variables in R. Many functions in statistical and visualization packages in R require the input to be a factor.\n\n\n\nGetting started\nLet’s start by creating a factor vector named foo.\n\nfoo <- factor(c(\"green\", \"green\", \"red\", \"red\", \"yellow\", \"yellow\", \"red\", \"red\",\"yellow\"))\nfoo\n\n[1] green  green  red    red    yellow yellow red    red    yellow\nLevels: green red yellow\n\n\nLet’s explore the factor vector that we just created.\n\ntable(foo)\n\nfoo\n green    red yellow \n     2      4      3 \n\n\nThe table function will give you the frequency of each level in the factor variable.\nLet’s count number of levels in the factor variable.\n\nnlevels(foo)\n\n[1] 3\n\n\nLet’s see what are the levels in the factor variable.\n\nlevels(foo)\n\n[1] \"green\"  \"red\"    \"yellow\"\n\n\nIf you notice from the output of the levels function, the levels are ordered alphabetically( this is the default behaviour).\nLet’s reorder the levels in the factor variable.\n\nfoo <- factor(foo, levels = c(\"yellow\", \"green\", \"red\"))\nlevels(foo)\n\n[1] \"yellow\" \"green\"  \"red\"   \n\n\nHere levels are ordered in the order that we specified.\nWe can also use the fct_relevel function from the forcats package to reorder the levels based on the frequency of the levels.\n\nlibrary(forcats)\n\n\nfoo <- fct_relevel(foo, c(\"yellow\",\"red\"))\nlevels(foo)\n\n[1] \"yellow\" \"red\"    \"green\" \n\n\nWe can also change the level order based on the frequency of the levels.\nBelow the levels are ordered based on the frequency of the levels, with the most frequent level first ie “red”, then “yellow” and then “green”.\n\nfoo <- fct_infreq(foo)\nlevels(foo)\n\n[1] \"red\"    \"yellow\" \"green\" \n\n\nIf we want to order it based on the frequency in the reverse order, we can do that too.\n\nfoo <- fct_rev(foo)\nlevels(foo)\n\n[1] \"green\"  \"yellow\" \"red\"   \n\n\n\n\nWord of caution\nYou need to be careful when working with factors in R. Even though a factor may look like a character vector, it is not one. Many functions that expect the input to be a character vector will throw an error if given a factor instead. Here is an example…\n\n# nchar(foo)\n\nThe above code will throw an error. Because the nchar() expects the input to be a character vector. Let’s try it after coercing the factor to a character vector.\n\nnchar(as.character(foo))\n\n[1] 5 5 3 3 6 6 3 3 6\n\n\nThe stringr package functions will by default coerce the factor to a character vector and work on it. And returns the output as a character vector. But it is always better to convert the factor to a character vector before passing it to a function that expects a character vector. That way you know what you are doing, and no surprises when you are using the wrangled data in your vizualizations or statistical models.\nHere is a quick demo of how stringr functions work with factors.\n\nlibrary(stringr)\nfoo_after_stringr <- str_replace(foo, \"yellow\", \"blue\")\nfoo_after_stringr\n\n[1] \"green\" \"green\" \"red\"   \"red\"   \"blue\"  \"blue\"  \"red\"   \"red\"   \"blue\" \n\ntypeof(foo_after_stringr)\n\n[1] \"character\"\n\n\nAs you can see foo_after_stringr is a character vector."
  },
  {
    "objectID": "docs/misc/r_lubridate.html",
    "href": "docs/misc/r_lubridate.html",
    "title": "Working with dates in R",
    "section": "",
    "text": "Introduction\nWhy do we want to learn how to work with dates in R?\n\nDates are a common data type in data analysis.\nDates can be used to filter data—for eg, by setting a date range to filter the data.\nDates can be used to create new features in the data — such as adding the current date (today()) to indicate when a row was updated.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\n\n# Create a tibble with a date column\n\ntime_df <- tibble(date_col = c(\"15-1-2020\",\"15-1-2019\",\"20-1-2019\",\"30-1-2019\",\"13-1-2020\"),\n                   other_col = c(\"Alice\", \"Bob\", \"Charlie\", \"Jab\", \"Bobby\"))\n\nprint(time_df)\n\n# A tibble: 5 × 2\n  date_col  other_col\n  <chr>     <chr>    \n1 15-1-2020 Alice    \n2 15-1-2019 Bob      \n3 20-1-2019 Charlie  \n4 30-1-2019 Jab      \n5 13-1-2020 Bobby    \n\n\n\n\n\n\n\n\nNote\n\n\n\nEven though in the above situation we are creating dummy tables, you can think of dummy_tibble as a tibble that you read from a file or a database.\n\n\nYou can, of course, work with date columns as strings and perform all the necessary operations. However, this approach can complicate things, be error-prone, and make your code less readable. Why do all the additional and unnecessary work when you have a package that can handle it for you?\nLet’s use the lubridate package and see what it can do for us.\n\nlibrary(lubridate)\n\n\n\nWorking with dates\nLet’s first extract the day of the week from the date column in the time_df tibble. For eg, if you want to determine if any of the dates fall on a Monday, you can use the lubridate package to accomplish this.\n\n\n\n\n\n\nTip\n\n\n\nThe wday() in the lubridate package returns the day of the week. Just like this, there are many functions available in the package to help you work with dates. You don’t need to remember all of them— you can always refer to the documentation. There is also a cheat sheet available for the package. Here is the link to the cheat sheet.\n\n\n\ntime_df |> filter(wday(date_col, abbr = FALSE) == 'Monday')\n\n# A tibble: 0 × 2\n# ℹ 2 variables: date_col <chr>, other_col <chr>\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe above code didn’t throw an error, but you can see that the output is not as expected. Sometimes it’s not immediately obvious if the output is correct, and you might continue working under the assumption that your code is right.\nIMPORTANT NOTE: Make sure to convert the date column to the correct date format by specifying the appropriate format (you will see more on this soon). Otherwise, R will perform an implicit date conversion by default, which can lead to incorrect results.\n\n\n\nDiscussion: Any thoughts on what is going on in the above code?\n\n\n\n\n\n\n\nNote\n\n\n\nBefore using the date manipulation function from the lubridate package into the column that is looking like date, you first want to see if the column is of type date. CSV, TSV and excel files that we are dealing with can’t store the datatypes as well within the file (or in more technical sense it can’t hold the schema with the file). Hence you want to first make that column as a date column, by specifying the correct format. Here it id of the format dd-mm-yyyy, so we can use the dmy() function in the lubridate package.\n\n\n\ntime_df |> mutate(date_col = ymd(date_col)) |> filter(wday(date_col, abbr = FALSE, label = TRUE) == 'Monday')\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `date_col = ymd(date_col)`.\nCaused by warning:\n! All formats failed to parse. No formats found.\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: date_col <date>, other_col <chr>\n\n\n\nExercise: If you want to make sense on what happened before when we didn’t use ymd() function, you can run the below codes, to see what happened.\n\nFollowing is unexpected behaviour:\n\nprint(time_df$date_col)\n\n[1] \"15-1-2020\" \"15-1-2019\" \"20-1-2019\" \"30-1-2019\" \"13-1-2020\"\n\ntypeof(time_df$date_col)\n\n[1] \"character\"\n\nyear(time_df$date_col)\n\n[1] 15 15 20 30 13\n\nmonth(time_df$date_col)\n\n[1] 1 1 1 1 1\n\nday(time_df$date_col)\n\n[1] 20 20 20 20 20\n\n\nFollowing is the expected behaviour:\n\nprint(time_df$date_col)\n\n[1] \"15-1-2020\" \"15-1-2019\" \"20-1-2019\" \"30-1-2019\" \"13-1-2020\"\n\ntypeof(dmy(time_df$date_col))\n\n[1] \"double\"\n\nprint(dmy(time_df$date_col))\n\n[1] \"2020-01-15\" \"2019-01-15\" \"2019-01-20\" \"2019-01-30\" \"2020-01-13\"\n\nyear(dmy(time_df$date_col))\n\n[1] 2020 2019 2019 2019 2020\n\nmonth(dmy(time_df$date_col))\n\n[1] 1 1 1 1 1\n\nday(dmy(time_df$date_col))\n\n[1] 15 15 20 30 13\n\n\nNow let’s move on and try filtering the date_col based on an interval. For eg, what can we do if we want to filter out the data within a certain interval?\nThe first step is to define the interval that we want to filter on. Here, we use the interval() from the lubridate package.\n\nstart_date <- ymd(\"2020-01-15\")\nend_date <- ymd(\"2020-01-15\")\nmy_interval <- interval(start_date, end_date)\n\nAfter defining the interval, we can now filter the data using filter() and %within% function.\n\ntime_df |> mutate(date_col = dmy(date_col)) |> filter(date_col %within% my_interval)\n\n# A tibble: 1 × 2\n  date_col   other_col\n  <date>     <chr>    \n1 2020-01-15 Alice"
  },
  {
    "objectID": "docs/genomics/about.html",
    "href": "docs/genomics/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "docs/cloud-computing/about.html",
    "href": "docs/cloud-computing/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "docs/machine-learning/about.html",
    "href": "docs/machine-learning/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto_exp",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]